Section 2 - Mockito 4 Basics
=============================
First Mocks
------------
In HappyHotel project, create new test class, "Test01FirstMocks".

Class under test is BookingService. We want to instantiate booking service, but we need to provide the four dependencies of the class. We want don't want to use concrete dependencies as in the case of MailSender the method there is no finished yet annd throws an exception.

Need to add the four fields that correspond to the dependencies:

	private BookingService bookingService;
	
    private PaymentService paymentServiceMock;
    private RoomService roomServiceMock;
    private BookingDAO bookingDAOMock;
    private MailSender mailSenderMock;

Then in the setup method, create the mocks. To make things easier for us, add the following static import at the top of the file:

	import static org.mockito.Mockito.*;
	
	@BeforeEach
    void setup() {

        this.paymentServiceMock = mock(PaymentService.class);
        this.roomServiceMock = mock(RoomService.class);
        this.bookingDAOMock = mock(BookingDAO.class);
        this.mailSenderMock = mock(MailSender.class);
		
		this.bookingService = new BookingService(paymentServiceMock, roomServiceMock, bookingDAOMock, mailSenderMock);
    }
	
*** The "mock" method, is the basic method in Mockito, which creates a dummy object of the given class. ***

In this case, we get a dummy PaymentService. It will not actually have any of the available functionality in the class but it will pretend to have it! Behind the screen, it doesn't have any of the code or business logic of the payment class.

Now we can instantiate our business class and provide the mocks as dependencies.

Now the BookingService is prepared and contains our mocks.

	@Test
    void should_CalculateCorrectPrice_When_CorrectInput() {

        // given
        BookingRequest bookingRequest = new BookingRequest("1", LocalDate.of(2020, 01, 01),
                LocalDate.of(2020, 01, 05), 2, false);
        double expected = 4 * 2 * 50.0;

        // when
        double actual = bookingService.calculatePrice(bookingRequest);

        // then
        assertEquals(expected, actual);

    }

Note for above, we didn't actually use the mocks, only created them. We only used them to instantiate the BookingService object. "calculatePrice" did not need them.


Default Return Values
----------------------
We will test the following method from the BookingService class:

	public int getAvailablePlaceCount() {
		return roomService.getAvailableRooms()
				.stream()
				.map(room -> room.getCapacity())
				.reduce(0, Integer::sum);
	}
	
This time we will use a dependency, roomService above.

For this add, a new test class "Test02DefaultReturnValues" by copying the other one "Test01FirstMocks".

We know that roomService is a mock, and doesn't contain any business logic from the orignal class. So what will it return?

*** By default, Mockito returns nice mocks, *** which means return values that actually make some sense.

getAvailableRooms() below. A nice mock for this will return an empty list, sum of all places in an empty list will be 0:

	public List<Room> getAvailableRooms() {
		return roomAvailability.entrySet().stream()
				.filter(entry -> entry.getValue())
				.map(entry -> entry.getKey())
				.collect(Collectors.toList());
	}
	
Test below passes:

	@Test
    void should_CountAvailablePlaces() {
        // given
        int expected = 0;

        // when
        int actual = bookingService.getAvailablePlaceCount();

        // then
        assertEquals(expected, actual);
    }



Returning Custom Values
------------------------
Create new test class: "Test03ReturningCustomValues"

Need to teach our roomService mock to return a list with one room when the getAvailableRooms() method is called.

We will use a new mockito method named "when()". In it, provide the method that will be called. With "thenReturn()", specify what should be returned.

Below will return a single element list:

	when(this.roomServiceMock.getAvailableRooms())
		.thenReturn(Collections.singletonList(new Room("Room 1", 2)));
		
Full test method below:

	@Test
    void should_CountAvailablePlaces_When_OneRoomAvailable() {
        // given
        when(this.roomServiceMock.getAvailableRooms())
                .thenReturn(Collections.singletonList(new Room("Room 1", 5)));
        int expected = 5;

        // when
        int actual = bookingService.getAvailablePlaceCount();

        // then
        assertEquals(expected, actual);
    }
	
Test for multiple rooms available:	

	@Test
    void should_CountAvailablePlaces_When_MultipleRoomsAvailable() {
        // given
        List<Room> rooms = Arrays.asList(new Room("Room 1", 2), new Room("Room 2", 5));
        when(this.roomServiceMock.getAvailableRooms())
                .thenReturn(rooms);
        int expected = 7;

        // when
        int actual = bookingService.getAvailablePlaceCount();

        // then
        assertEquals(expected, actual);
    }


Multiple thenReturn Calls
--------------------------
For the first time method is called return one value, for the second time return another with multiple thenReturns() methods.

Create new test class "Test04MultipleThenReturnCalls".

	@Test
    void should_CountAvailablePlaces_When_CalledMultipleTimes() {
        // given
        when(this.roomServiceMock.getAvailableRooms())
                .thenReturn(Collections.singletonList(new Room("Room 1", 5)))
                .thenReturn(Collections.emptyList());
        int expectedFirstCall = 5;
        int expectedSecondCall = 0;

        // when
        int actualFirst = bookingService.getAvailablePlaceCount();
        int actualSecond = bookingService.getAvailablePlaceCount();

        // then
        assertAll(
                () -> assertEquals(expectedFirstCall, actualFirst),
                () -> assertEquals(expectedSecondCall, actualSecond)
        );
    }



Throwing Exceptions
--------------------
Looking at below method which relies on 4 dependencies:

	public String makeBooking(BookingRequest bookingRequest) {
		String roomId = roomService.findAvailableRoomId(bookingRequest);
		double price = calculatePrice(bookingRequest);

		if (bookingRequest.isPrepaid()) {
			paymentService.pay(bookingRequest, price);
		}

		bookingRequest.setRoomId(roomId);
		String bookingId = bookingDAO.save(bookingRequest);
		roomService.bookRoom(roomId);
		mailSender.sendBookingConfirmation(bookingId);
		return bookingId;
	}

Create new test class, "Test05ThrowingExceptions".

	@Test
    void should_ThrowException_When_NoRoomAvailable() {

        // given
        BookingRequest bookingRequest = new BookingRequest("1", LocalDate.of(2020, 01, 01),
                LocalDate.of(2020, 01, 05), 2, false);
        when(this.roomServiceMock.findAvailableRoomId(bookingRequest))
                .thenThrow(BusinessException.class);

        // when
        Executable executable = () -> bookingService.makeBooking(bookingRequest);

        // then
        assertThrows(BusinessException.class, executable);
    }

BusinessException is an exception created for the purposes of the course and extends the RuntimeException class.

Test passes and an exception was thrown correctly.

To sum up, we can throw an exception from a mock using the "when-thenThrow" pattern. Inside the thenThrow() brackets we simply need to provide the type of exception to be thrown.


Argument Matchers
------------------
Based on previous test, what if we want to throw an exception no matter which bookingRequest is passed. This is where Mockito Argument Matchers come in handy.

Create a new test class, "Test06Matchers". Import new library:

	import static org.mockito.ArgumentMatchers.*;
	
	@Test
    void should_NotCompleteBooking_When_PriceTooHigh() {

        // given
        BookingRequest bookingRequest = new BookingRequest("1", LocalDate.of(2020, 01, 01),
                LocalDate.of(2020, 01, 05), 2, true);
        when(this.paymentServiceMock.pay(bookingRequest, price))
                .thenThrow(BusinessException.class);

        // when
        Executable executable = () -> bookingService.makeBooking(bookingRequest);

        // then
        assertThrows(BusinessException.class, executable);
    }

We want paymentServiceMock to throw an exception for any kind of input, any kind of booking request. To that end, Mockito has an argument named "any()". You can provide an argument for any() i.e. BusinessException.class, but you can also leave it empty.

[Any here, for any kind of booking request. Not limited to a specific BookingRequest]

Can't use "any()" for primitive double values for the "price". We need to use primitive specific matchers such as "anyDouble()".

You should see an exception thrown now when you run the test.

If we change the bookingRequest userId to "2" from "1", the test will still pass. That's the magic of mockito's ArgumentMatchers.

Mockito's ArgumentMatchers are not rocket science, but you should remember three things when working with them:
	1) Use any() for objects, then specific "any" for the other primitives.
	2) May be tempted to mix matchers with exact values i.e. any booking request does not work above for exact double value of 400.0.
	
		a) If we do want to mix them, we can use the "eq" method, short for equals:
			- when(this.paymentServiceMock.pay(any(), eq(400.0)))
			
	3) May find mathcing Strings a bit tricky, even though we have "anyString()
	
		a) "anyString()" will NOT match a null String
		b) For Null Strings, use any(). Matches a null String object.

Follow the three rules and you should be fine working with Mockito ArgumentMatchers.


Verifying Behaviour
---------------------
Sometimes it's important to find out if the class under test calls specific methods from the mocks, how many times it happens, or if any other unexpected methods are called.

When we called the bookingService.makeBooking method, we only cared about it's output. *** We never found out if the makeBooking method called any of the mocks inside. These would be the "side effects" of the method under test, and we will find out how to verify them with Mockito. ***

Create a new test class called "Test07VerifyBehaviour".

Add:

	import static org.mockito.ArgumentMatchers.*;
	import static org.mockito.Mockito.*;
	
Create two new test methods:

	@Test
    void should_InvokePayment_When_Prepaid() { ... }

    @Test
    void should_NotInvokePayment_When_NotPrepaid() { ... }


Won't be using and when/thenThrow patterns because we want the mocks to return the default values as they are.

Inside bookingService.makeBooking() we want to verify that the paymentService mock was called. For this we use mockito's "verifiy" method:

	@Test
    void should_InvokePayment_When_Prepaid() {

        // given
        BookingRequest bookingRequest = new BookingRequest("1", LocalDate.of(2020, 01, 01),
                LocalDate.of(2020, 01, 05), 2, true);
        double expected = 4 * 2 * 50.0;

        // when
        bookingService.makeBooking(bookingRequest);

        // then
        verify(paymentServiceMock).pay(bookingRequest, 400.0); // Check if called with these specific arguments
		verifyNoMoreInteractions(paymentServiceMock);

    }
	
Do one more thing:

	verifyNoMoreInteractions(paymentServiceMock); // Checks only used once
	
Above checks if any other methods from this mock are called.

Can add a second argument to the first "verify" above to check the mock was called only once:

	verify(paymentServiceMock, times(1)).pay(bookingRequest, 400.0);
	

Second test, verifiy that pay method isn't called when prepaid is false:

	@Test
    void should_NotInvokePayment_When_NotPrepaid() {

        // given
        BookingRequest bookingRequest = new BookingRequest("1", LocalDate.of(2020, 01, 01),
                LocalDate.of(2020, 01, 05), 2, false);
        double expected = 4 * 2 * 50.0;

        // when
        bookingService.makeBooking(bookingRequest);

        // then
        verify(paymentServiceMock, never()).pay(any(), anyDouble());

    }

This line verifies that paymentService was never called and the method pay() was never invoked for any kind of input.

*** So to sum up, you can see that verifiy(...) is a very nice method that is often used in the "then" section of Mockito tests and that it verifies whether certain mocks were called or not called as expected. ***


Spies
------
Also known as "partial mocks".

Create new test class "Test08Spies".

We want to store the bookingId first of all:

	String bookingId = bookingService.makeBooking(bookingRequest);
	
Then we want to verify that the bookingDAO mock is used and the save() method is invoked.

	@Test
    void should_MakeBooking_When_InputOK() {

        // given
        BookingRequest bookingRequest = new BookingRequest("1", LocalDate.of(2020, 01, 01),
                LocalDate.of(2020, 01, 05), 2, true);
        double expected = 4 * 2 * 50.0;

        // when
        String bookingId = bookingService.makeBooking(bookingRequest);

        // then
        verify(bookingDAOMock).save(bookingRequest);
        System.out.println("bookingId=" + bookingId);

    }
	
When above is run. The test passes and returns "null" as the BookingDAO is a mock that returns, the default, nice values, so when we ask it to save the object and to return a string ID, the default string that is returned is a null string.

What happens when we change the bookingDAOMock into a spy?

	this.bookingDAOMock = spy(BookingDAO.class);
	
Now, we see that the test passes but the string returns an actual bookingId.

*** The difference between mocks and spies is that mocks don't have any logic of the mocked class, and they simply return the default values such as nulls or empty lists, unless we change their behaviour. ***

*** Spies in turn, have all the logic from the mocked class, so they behave just like a normal object of the mocked class unless you modify some of the behaviour. ***

	mock = dummy object with no real logic
	spy = real object with real logic that we can modify
	
In other words, for spies, we call the actual methods from the actual classes.

In case above, we are actually going to use the bookingDAO.save() method.

Now for a new test method:

	@Test
    void should_CancelBooking_When_InputOK() {

        // given
        BookingRequest bookingRequest = new BookingRequest("1", LocalDate.of(2020, 01, 01),
                LocalDate.of(2020, 01, 05), 2, true);
        bookingRequest.setRoomId("1.3");
        String bookingId = "1";

        // when
        bookingService.cancelBooking(bookingId);

        // then

    }
	
For above, the test fails with a NullPointerException on this particular line:

	public void cancelBooking(String id) {
		BookingRequest request = bookingDAO.get(id); // <- Null booking request
		roomService.unbookRoom(request.getRoomId()); // <- This line
		bookingDAO.delete(id);
	}

That's because when we call cancelBooking() and we use a fake booking ID, the bookingDAO, which is not a mock, it is a spy, will try to get the actual booking request. Now, we know that this booking request does not exist, so we will get a null as the booking request here.

So if we try to call the getRoomID() method for the null, we will get a NullPointerException.

So, we know that the bookingDAO spy returns the actual value for the actual booking ID, which is null. We don't want that. We want to change the behaviour of the spy so that it returns the booking request from the "given" section.

To do that, we need to use something similar to the when/thenReturn pattern. But for spies, we actually go the other way around, and we write the following:

	doReturn(bookingRequest).when(bookingDAOMock).get(bookingId);

Summary:

	mocks: when(mock.method()).thenReturn()
	spies: doReturn().when(spy).method())
	
For above, we want to return the bookingRequest when the bookingDAOMock, which is actuall now a spy, uses the method get() with the bookingID we entered as a parameter.

Now, even though we do have a spy, which has the actual implementation of the bookingDAO class, we slightly modified it's behaviour for this particular method and this particular input.

And now, if we run the test. It passes.

So to sum up, a spy is a "partial mock". You can still modify it's behaviour, make it return the values that you want, but by default, it uses the code from the actual class.

	mock (partial mock) = a real object with real methods that we can modify.



Mocking Void Methods
---------------------
Create new test class "Test09MockingVoidMethods".

For method below, we wish to throw exception for the "mailSender" part:

	public String makeBooking(BookingRequest bookingRequest) {
		String roomId = roomService.findAvailableRoomId(bookingRequest);
		double price = calculatePrice(bookingRequest);

		if (bookingRequest.isPrepaid()) {
			paymentService.pay(bookingRequest, price);
		}

		bookingRequest.setRoomId(roomId);
		String bookingId = bookingDAO.save(bookingRequest);
		roomService.bookRoom(roomId);
		mailSender.sendBookingConfirmation(bookingId); // <-
		return bookingId;
	}
	
Can't use "when" method to test sendBookingConfirmation method throws an exception as it is void.

For void methods we need to use "doThrow()"

	@Test
    void should_ThrowException_When_MailNotReady() {

        // given
        BookingRequest bookingRequest = new BookingRequest("1", LocalDate.of(2020, 01, 01),
                LocalDate.of(2020, 01, 05), 2, false);
        doThrow(new BusinessException()).when(mailSenderMock).sendBookingConfirmation(any());

        // when
        Executable executable = () -> bookingService.makeBooking(bookingRequest);

        // then
        assertThrows(BusinessException.class, executable);
    }
	
Above passes. Similar pattern for checking if a void method does not throw an exception.

	@Test
    void should_NotThrowException_When_MailNotReady() {

        // given
        BookingRequest bookingRequest = new BookingRequest("1", LocalDate.of(2020, 01, 01),
                LocalDate.of(2020, 01, 05), 2, false);
        doNothing().when(mailSenderMock).sendBookingConfirmation(any());

        // when
        bookingService.makeBooking(bookingRequest);

        // then
        // no exception thrown
    }

To sum up. If you want to throw an exception from a void method, use doThrow().when() pattern. Can make sure a void method doesn't do anything with doNothing().

doNothing() is actually the default behaviour for a void method so you could actually uncomment that line.
